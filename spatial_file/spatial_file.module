<?php

/**
 * @file
 * TODO: Rework module description
 */

define('SPATIAL_FILE_GROUPING_COLLECTION', 0);
define('SPATIAL_FILE_GROUPING_MULTIPLE', 1);
define('SPATIAL_FILE_GROUPING_BYTYPE', 2);

/**
 * Implements hook_field_widget_info().
 */
function spatial_file_field_widget_info() {
  return array(
    'spatial_file' => array(
      'label'       => t('Spatial file'),
      'description' => t('TODO: Change Descr - Display a list of shapefiles as a select list.'),
      'field types' => array('geofield'),
      'settings'    => array(
        'associated_filefield' => array(),
        'multiple_values' => SPATIAL_FILE_GROUPING_COLLECTION,
        'allowed_types' => array('line', 'point', 'polygon'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function spatial_file_field_widget_settings_form($field, $instance) {
  module_load_include('inc', 'spatial_file', 'spatial_file.widget');
  return _spatial_file_widget_settings_form($field, $instance);
}

/**
 * Implements hook_field_widget_form().
 */
function spatial_file_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  module_load_include('inc', 'spatial_file', 'spatial_file.widget');
  return _spatial_file_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * The #value_callback for the file_generic field element.
 */
function spatial_file_field_widget_value($element, $input = FALSE, $form_state) {
  module_load_include('inc', 'spatial_file', 'spatial_file.widget');
  return _spatial_file_widget_value($element, $input, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
// TODO: Can probably ditch this
function spatial_file_field_widget_error($element, $error, $form, &$form_state) {
//  form_error($element['fid'], 'yo: '.$error['message']);
}


function spatial_file_get_wkt_features($uri) {
  // TODO:
  $uri_chunks = explode('.', $uri);

  if (isset($uri_chunks[1])) {

    $file_extension = $uri_chunks[1];
    // TODO: This should not be a switch, it should invoke a hook to get stuff back
    switch ($file_extension) {

      case 'zip':
        return spatial_shapefile_get_wkt($uri);

    }

  }
  else {
    // TODO: Create watchdog entry, spatial_file_get_wkt needs the proper file extension
  }
}


/**
 * Exposed function that other modules may use.
 *
 * Params: $wkt_features as returned by a few different functions
 *         $compress_method how to handle multivalues
 */
function spatial_file_parse_wkt_features($wkt_features, $grouping_method = SPATIAL_FILE_GROUPING_COLLECTION) {
  $store_features = array();
  $return_features = array();

  foreach ($wkt_features as $wkt_feature) {
    if (!isset($wkt_feature['WKT']) || empty($wkt_feature)) {
      continue;
    }
    switch ($compress_method) {

      case SPATIAL_FILE_GROUPING_COLLECTION:
        $store_features[] = $wkt_feature['WKT'];
        break;

      case SPATIAL_FILE_GROUPING_MULTIPLE:
        $wkt = array('wkt' => $wkt_feature['WKT']);
        $return_features[] = geofield_compute_values($wkt);
        break;

      case SPATIAL_FILE_GROUPING_BYTYPE:
        break;

    } 
  }

  switch ($compress_method) {

    case SPATIAL_FILE_GROUPING_COLLECTION:
      if ($store_features) {
        // If there is more than one value to save, wrap in GeometryCollection
        if (isset($store_features[1])) {
          $wkt = array('wkt' => 'GEOMETRYCOLLECTION('. implode(',', $store_features) .')');
        }
        else {
          $wkt = array('wkt' => $store_features[0]);
        }
        $return_features[] = geofield_compute_values($wkt);
      }
      break;

    case SPATIAL_FILE_GROUPING_BYTYPE:
      break;

  }

  return $return_features;
}
