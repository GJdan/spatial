<?php

/**
 * @file
 * TODO: Rework module description
 */

define('SPATIAL_FILE_GROUPING_COLLECTION', 0);
define('SPATIAL_FILE_GROUPING_MULTIPLE', 1);
define('SPATIAL_FILE_GROUPING_BYTYPE', 2);

/**
 * Implements hook_schema_alter().
 */
function spatial_file_schema_alter(&$schema) {
  // Add associated file id to geofield schema.
  // @TODO: This is returning schemas of each field rather than for the single
  // geofield type.

  //_p(array_keys($schema));
}

/**
 * Implements hook_field_info_alter().
 */
function spatial_file_field_info_alter(&$info) {
  if (isset($info['geofield'])) {
    $info['geofield']['settings']['uri_scheme'] = variable_get('file_default_scheme', 'public');
    $info['geofield']['instance_settings']['file_extensions'] = 'zip kml';
    $info['geofield']['instance_settings']['file_directory'] = '';
    $info['geofield']['instance_settings']['max_filesize'] = '';
  }
}

/**
 * Implements hook_field_widget_info().
 */
function spatial_file_field_widget_info() {
  return array(
    'spatial_file' => array(
      'label'       => t('Spatial file'),
      'field types' => array('geofield'),
      'settings'    => array(
        'progress_indicator' => 'throbber',
        //'associated_filefield' => array(),
        //'multiple_values' => SPATIAL_FILE_GROUPING_COLLECTION,
        'allowed_types' => array('line', 'point', 'polygon'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function spatial_file_field_widget_settings_form($field, $instance) {
  module_load_include('inc', 'spatial_file', 'spatial_file.widget');
  return _spatial_file_widget_settings_form($field, $instance);
}

/**
 * Implements hook_field_widget_form().
 */
function spatial_file_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  module_load_include('inc', 'spatial_file', 'spatial_file.widget');
  return _spatial_file_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * The #value_callback for the file_generic field element.
 */
function spatial_file_field_widget_value($element, $input = FALSE, $form_state) {
  module_load_include('inc', 'spatial_file', 'spatial_file.widget');
  return _spatial_file_widget_value($element, $input, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
// TODO: Can probably ditch this
function spatial_file_field_widget_error($element, $error, $form, &$form_state) {
//  form_error($element['fid'], 'yo: '.$error['message']);
}

/**
 * This function takes an array of spatial files (currently ESRI Shapefile and KML files are supported)
 *   and processes them into geofield value arrays
 *
 *   TODO: Add a parameter to include / exclude types
 */
function spatial_file_to_geofield($spatial_files,
                                    $group_multiple_values = SPATIAL_FILE_GROUPING_COLLECTION,
                                    $separate_files = 0
                                ) {
  $spatial_features = array();

  foreach ($spatial_files as $spatial_file) {
    $file_uri = '';

    if (is_array($spatial_file)) {
      if ($file = file_load($spatial_file['fid'])) {
        $file_uri = $file->uri;
      }
      else {
        // TODO: add a watchdog entry
        continue;
      }
    }
    else {
      // TODO: Add processing for fid ints and uri strings
      continue;
    }

    if ($file_uri) {
      if ($file_spatial_features = spatial_file_get_wkt_features($file_uri)) {
        if ($separate_files) {
          $spatial_features[] = $file_spatial_features;          
        }
        else {
          $spatial_features = array_merge($spatial_features, $file_spatial_features);
        }
      }
    }
  }

  if ($spatial_features) {
    if ($separate_files) {
      $geofield_values = array();
      foreach ($spatial_features as $file_features) {
        $geofield_values[] = spatial_file_parse_wkt_features($file_features, $group_multiple_values);
      }
      return $geofield_values;
    }
    else {
      return spatial_file_parse_wkt_features($spatial_features, $group_multiple_values);
    }
  }
}

function spatial_file_get_wkt_features($uri) {
  // TODO:
  $uri_chunks = explode('.', $uri);

  if (isset($uri_chunks[1])) {

    $file_extension = $uri_chunks[1];
    // TODO: This should not be a switch, it should invoke a hook to get stuff back
    switch ($file_extension) {

      case 'zip':
        if (module_exists('spatial_shapefile')) {
          return spatial_shapefile_get_wkt($uri);        
        }

      case 'kml':
        if (module_exists('spatial_kml')) {
          return spatial_kml_get_wkt($uri);        
        }
    }

    // TODO: This should be a watchdog entry, not a dsm()
    drupal_set_message('Spatial files of this type ('. $file_extension .') can not currently be processed', 'error');

  }
  else {
    // TODO: Create watchdog entry, spatial_file_get_wkt needs the proper file extension
  }
}


/**
 * Exposed function that other modules may use.
 *
 * Params: $wkt_features as returned by a few different functions
 *         $compress_method how to handle multivalues
 */
function spatial_file_parse_wkt_features($wkt_features, $group_multiple_values = SPATIAL_FILE_GROUPING_COLLECTION) {
  $store_features = array();
  $return_features = array();

  if (SPATIAL_FILE_GROUPING_BYTYPE == $group_multiple_values) {
    $geometry_pattern = array(
      'POINT' => '/^POINT\s*(\(-?\d+\.\d+ -?\d+\.\d+\))$/i',
      'LINESTRING' => '/^LINESTRING\s*(\(.*\))$/i',
      'POLYGON' => '/^POLYGON\s*(\(.*\))$/i',
    );
    $multiple_string = array(
      'POINT' => 'MULTIPOINT(%s)',
      'LINESTRING' => 'MULTILINESTRING(%s)',
      'POLYGON' => 'MULTIPOLYGON(%s)',
    );
  }

  foreach ($wkt_features as $wkt_feature) {
    if (!isset($wkt_feature['WKT']) || empty($wkt_feature)) {
      continue;
    }

    switch ($group_multiple_values) {

      case SPATIAL_FILE_GROUPING_COLLECTION:
        $store_features[] = $wkt_feature['WKT'];
        break;

      case SPATIAL_FILE_GROUPING_MULTIPLE:
        $wkt = array('wkt' => $wkt_feature['WKT']);
        $return_features[] = geofield_compute_values($wkt);
        break;

      case SPATIAL_FILE_GROUPING_BYTYPE:
        $matches = array();
        $feature_type = '';

        if (preg_match('/^([A-Z]+)/', $wkt_feature['WKT'], $matches)) {
          $feature_type = $matches[0];
        }

        switch ($feature_type) {

          case 'POINT':
          case 'LINESTRING':
          case 'POLYGON':
            // These feature types need to be grouped in multiple geometries by type
            $matches = array();
            if (preg_match($geometry_pattern[$feature_type], $wkt_feature['WKT'], $matches)) {
              $store_features[$feature_type][] = $matches[1];
            }
            break;

          case 'MULTIPOINT':
          case 'MULTILINESTRING':
          case 'MULTIPOLYGON':
            // TODO: These multiple geometries should be broken up so that there is only one for each type
            // For now we just don't want hundreds of fields so we can probably save these as they are
            $wkt = array('wkt' => $wkt_feature['WKT']);
            $return_features[] = geofield_compute_values($wkt);
            break;

          case 'GEOMETRYCOLLECTION':
            // TODO: Any GEOMETRYCOLLECTION features should really be broken up into its types
            // For now just block it from going in
            // TODO: Add a message or watchdog or something
            break;
        }
        break;

    } 
  }

  switch ($group_multiple_values) {

    case SPATIAL_FILE_GROUPING_COLLECTION:
      if ($store_features) {
        // If there is more than one value to save, wrap in GeometryCollection
        if (isset($store_features[1])) {
          $wkt = array('wkt' => sprintf('GEOMETRYCOLLECTION(%s)', implode(',', $store_features)));
        }
        else {
          $wkt = array('wkt' => $store_features[0]);
        }
        $return_features[] = geofield_compute_values($wkt);
      }
      break;

    case SPATIAL_FILE_GROUPING_BYTYPE:
      foreach ($store_features as $feature_type => $features) {
        switch ($feature_type) {
          case 'POINT':
          case 'LINESTRING':
          case 'POLYGON':
            // TODO: If there is just one feature of this type then it shouldn't be multi'ed
            $wkt = array(
              'wkt' => sprintf($multiple_string[$feature_type], implode(',', $features)),
            );
            $return_features[] = geofield_compute_values($wkt);
            break;
        }
      }
      break;

  }

  return $return_features;
}
